/**
 * Based on http://www.mkyong.com/java/how-to-execute-shell-command-from-java/
 */

package Server;

import java.io.InputStream;
import java.io.OutputStream;

import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.CharBuffer;
import java.util.Scanner;

//import java.lang.Thread;

public class VShell implements Runnable{
	
	private String startCmd;
	private Process p;
	
	private OutputStream stdin; // <- Eh?
	private InputStream stdout;
	
	private boolean alive;
	
	public VShell(String inCmd)
	{
		//this.startCmd = inCmd;
		//this.startCmd = "ping -c 3 google.com";
		this.startCmd = "python";
		this.alive = false;
	}

	public void run() {
 
		StringBuffer output = new StringBuffer();
		
		try {
			
			this.p = Runtime.getRuntime().exec(this.startCmd);
			this.alive = true;
			
			this.stdin  = p.getOutputStream();
			this.stdout = p.getInputStream();
			
			BufferedReader reader = new BufferedReader(new InputStreamReader(stdout));
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(stdin));
			
				
			this.sendCmd("print 1 + 2");
			this.sendCmd("quit()");
	
			
			System.out.println(this.readOutput());
			
			System.out.println("Exit: " + String.valueOf(p.exitValue()));
			p.destroy();
			this.alive = false;
			System.out.println("All done!");
		
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
	public String readOutput(){
		
		//I don't think we have to make a new reader every time to read.
		BufferedReader reader = new BufferedReader(new InputStreamReader(stdout));
		
		String returnString = "";
		
		//Write the output.
		Scanner scanner = new Scanner(reader);
		while (scanner.hasNextLine()) {
			returnString += scanner.nextLine();
		}
		
		return returnString;
	}
	
	public void sendCmd(String inCmd){
		if(this.alive){
			try {
				BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(this.stdin));
				writer.write(inCmd);
				writer.write("\n");
				writer.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else{
			throw new RuntimeException("Command sent to dead process.");
		}
	}
}
